# ========================================
# Kafka 消费者拦截器演示应用配置
# ========================================
# 应用名称
spring.application.name=kafka-12-consumer-Interceptor
# ========================================
# Kafka 连接配置
# ========================================
# Kafka 服务器地址（多个地址用逗号分隔）
# 默认：localhost:9092
spring.kafka.bootstrap-servers=192.168.56.10:9092
# ========================================
# 演示 Topic 配置
# ========================================
# 演示用的 Topic 名称
# 应用启动时会自动创建该 Topic（3个分区，1个副本）
demo.topic.name=consumer-interceptor-demo
# ========================================
# 消费者组配置
# ========================================
# 消费者组 ID
demo.consumer.group=consumer-interceptor-group
# ========================================
# 生产者配置
# ========================================
# 键序列化器：将消息键序列化为字节数组
# 使用字符串序列化器，适合演示场景
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# 值序列化器：将消息值序列化为字节数组
# 使用字符串序列化器，适合演示场景
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# ========================================
# 消费者配置
# ========================================
# 键反序列化器：将字节数组反序列化为字符串
# 使用字符串反序列化器，适合演示场景
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# 值反序列化器：将字节数组反序列化为字符串
# 使用字符串反序列化器，适合演示场景
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# 消费者组ID
spring.kafka.consumer.group-id=${demo.consumer.group}
# 自动提交偏移量：false表示手动提交
spring.kafka.consumer.enable-auto-commit=false
# 偏移量重置策略：earliest表示从最早的消息开始消费
spring.kafka.consumer.auto-offset-reset=earliest
# ========================================
# 消息监听器配置
# ========================================
# 开启消息监听的手动确认模式
spring.kafka.listener.ack-mode=manual_immediate
# ========================================
# 服务器配置
# ========================================
# 服务器端口配置
server.port=9102
