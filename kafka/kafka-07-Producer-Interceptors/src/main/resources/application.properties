# ========================================
# Kafka 生产者拦截器演示应用配置
# ========================================
# 应用名称
spring.application.name=kafka-07-Producer-Interceptors
# ========================================
# Kafka 连接配置
# ========================================
# Kafka 服务器地址（多个地址用逗号分隔）
# 默认：localhost:9097
spring.kafka.bootstrap-servers=localhost:9097
# ========================================
# 演示 Topic 配置
# ========================================
# 演示用的 Topic 名称
# 应用启动时会自动创建该 Topic（3个分区，1个副本）
demo.topic.name=demo-interceptor-topic
# ========================================
# 生产者配置
# ========================================
# 键序列化器：将消息键序列化为字节数组
# 使用字符串序列化器，适合演示场景
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# 值序列化器：将消息值序列化为字节数组
# 使用字符串序列化器，适合演示场景
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# ========================================
# 拦截器配置（方式一：属性配置）
# ========================================
# 自定义拦截器类列表（按执行顺序配置）
# 注意：如果 Java 配置类中也配置了拦截器，可能会重复
# 建议只使用一种配置方式，本示例同时演示两种方式
spring.kafka.producer.properties.interceptor.classes=com.action.kafka07producerinterceptors.interceptor.ModifyRecordInterceptor,com.action.kafka07producerinterceptors.interceptor.MetricsProducerInterceptor
# ========================================
# 其他可选配置（注释掉的配置可根据需要启用）
# ========================================
# 重试次数：发送失败时的重试次数
# spring.kafka.producer.retries=3
# 确认机制：消息确认级别
# all: 等待所有副本确认（最安全但最慢）
# 1: 等待主副本确认（平衡）
# 0: 不等待确认（最快但不安全）
# spring.kafka.producer.acks=all
# 请求超时时间（毫秒）
# spring.kafka.producer.request-timeout-ms=30000
# 批处理大小（字节）
# spring.kafka.producer.batch-size=16384
# 等待时间（毫秒）：等待更多消息加入批次的时间
# spring.kafka.producer.linger-ms=5
# 缓冲区大小（字节）
# spring.kafka.producer.buffer-memory=33554432
# ========================================
# 日志配置（可选）
# ========================================
# 设置 Kafka 相关日志级别
# logging.level.org.apache.kafka=INFO
# logging.level.com.action.kafka07producerinterceptors=DEBUG
